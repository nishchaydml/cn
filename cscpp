#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>

int main(){
  int welcomeSocket, newSocket, portNum, clientLen, nBytes;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  struct sockaddr_storage serverStorage;
  socklen_t addr_size;
  int i;

  welcomeSocket = socket(PF_INET, SOCK_STREAM, 0);

  portNum = 7891;

  serverAddr.sin_family = AF_INET;
  serverAddr.sin_port = htons(portNum);
  serverAddr.sin_addr.s_addr = inet_addr("192.168.13.6");
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

  bind(welcomeSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));

  if(listen(welcomeSocket,5)==0)
    printf("Listening\n");
  else
    printf("Error\n");

  addr_size = sizeof serverStorage;
    while(1){
    newSocket = accept(welcomeSocket, (struct sockaddr *) &serverStorage, &addr_size);
    if(!fork()){
      nBytes = 1;
  while(nBytes!=0){
        nBytes = recv(newSocket,buffer,1024,0);

        for (i=0;i<nBytes-1;i++){
          buffer[i] = toupper(buffer[i]);
        }

        send(newSocket,buffer,nBytes,0);
      }
      close(newSocket);
      exit(0);
    }
    else{
      close(newSocket);
    }
  }

  return 0;
}


#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
//Write a client-server program in TCP / IP in which the server-side code listens for connect requests, and whatever message the client sends the server converts it to uppercase and sends it back. 


int main(){
  int clientSocket, portNum, nBytes;
  char buffer[1024];
  struct sockaddr_in serverAddr;
  socklen_t addr_size;

  clientSocket = socket(PF_INET, SOCK_STREAM, 0);

  portNum = 7891;

  serverAddr.sin_family = AF_INET;
  serverAddr.sin_port = htons(portNum);
  serverAddr.sin_addr.s_addr = inet_addr("192.168.13.6");
  memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);

  addr_size = sizeof serverAddr;
  connect(clientSocket, (struct sockaddr *) &serverAddr, addr_size);

  while(1){
    printf("Type a sentence to send to server:\n");
    fgets(buffer,1024,stdin);
    printf("You typed: %s",buffer);

    nBytes = strlen(buffer) + 1;

    send(clientSocket,buffer,nBytes,0);

    recv(clientSocket, buffer, 1024, 0);

    printf("Received from server: %s\n\n",buffer);
  }

  return 0;
}


//HOW TO RUN -> 
OPEN 2 PUTTY SESSIONS SIMULTANEOUSLY AND RUN EACH PROGRAM IN EACH SESSION
//server session compilation ->  gcc server.c -o sr
//client session compilation -> gcc client.c -o cl
//run server -> ./sr
//run client -> ./cl

//output at server
Listening

//output at client
Type a sentence to send to server:
cn is fun
You typed: cn is fun
Received from server: CN IS FUN

Type a sentence to send to server:
whatever is typed will be converted to uppercase by server
You typed: whatever is typed will be converted to uppercase by server
Received from server: WHATEVER IS TYPED WILL BE CONVERTED TO UPPERCASE BY SERVER

